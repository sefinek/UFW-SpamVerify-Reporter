exports.MAIN = {
	// My Server
	UFW_LOG_FILE: '/var/log/ufw.log',
	CACHE_FILE: '/var/cache/sefinek/ufw-spamverify-reporter.cache',
	SERVER_ID: null, // The server name that will be visible in the reports (e.g., 'homeserver1'). If you don't want to define it, leave the value as null.
	IP_REFRESH_SCHEDULE: '0 */6 * * *', // CRON: How often should the script check the IP address assigned by the ISP to prevent accidental self-reporting? Default: every 6 hours
	IPv6_SUPPORT: true, // Specifies whether the device has been assigned an IPv6 address.

	// Reporting
	SPAMVERIFY_API_KEY: '', // Secret API key for SpamVerify.
	IP_REPORT_COOLDOWN: 12 * 60 * 60 * 1000, // The minimum time (12 hours) that must pass before reporting the same IP address again.

	// Automatic Updates
	AUTO_UPDATE_ENABLED: false, // Do you want the script to automatically update to the latest version using 'git pull'? (true = enabled, false = disabled)
	AUTO_UPDATE_SCHEDULE: '0 18 * * *', // CRON: Schedule for automatic script updates. Default: every day at 18:00

	// Discord Webhooks
	DISCORD_WEBHOOKS_ENABLED: false, // Should the script send webhooks? They will contain error reports, daily summaries related to reports, etc.
	DISCORD_WEBHOOKS_URL: '', // Webhook URL.
};


// Generates a report submission to SpamVerify.
const serverId = this.MAIN.SERVER_ID && this.MAIN.SERVER_ID !== 'null' ? `on ${this.MAIN.SERVER_ID} ` : '';
exports.REPORT_COMMENT = ({ date, srcIp, dstIp, proto, spt, dpt, In, Out, mac, len, ttl, id, tos, prec, res, window, urgp, syn }, fullLog) =>
	`Blocked by UFW ${serverId}[${dpt || 'N/A'}/${proto?.toLowerCase() || 'N/A'}]. Generated by: https://github.com/sefinek/UFW-SpamVerify-Reporter`;


// See: https://spamverify.readme.io/reference/categories
const categories = {
	TCP: {
		22: '8,14,10', // Port Scan | SSH | Brute Force
		80: '8,13', // Port Scan | Web App Attack
		443: '8,13', // Port Scan | Web App Attack
		8080: '8,13', // Port Scan | Web App Attack
		25: '8,7', // Port Scan | Email Spam
		21: '8,16,10', // Port Scan | FTP Brute Force | Brute Force
		53: '8,1,2', // Port Scan | DNS Compromise | DNS Poisoning
		23: '8,22,10', // Port Scan | Hacking | Brute Force
		3389: '8,22,10', // Port Scan | Hacking | Brute Force
		3306: '8,23', // Port Scan | SQL Injection
		6666: '8,19', // Port Scan | Fraud VoIP
		6667: '8,19', // Port Scan | Fraud VoIP
		6668: '8,19', // Port Scan | Fraud VoIP
		6669: '8,19', // Port Scan | Fraud VoIP
		9999: '8,17', // Port Scan | Ping of Death
	},
	UDP: {},
};

exports.DETERMINE_CATEGORIES = ({ proto, dpt }) => categories[proto]?.[dpt] || '8'; // Default: Port Scan